"""A high precision floating point value represented as a string"""
scalar BigFloat

"""
Boolean expression comparing fields on type "BigFloat"
"""
input BigFloatFilter {
  eq: BigFloat
  gt: BigFloat
  gte: BigFloat
  in: [BigFloat!]
  is: FilterIs
  lt: BigFloat
  lte: BigFloat
  neq: BigFloat
}

"""
Boolean expression comparing fields on type "BigFloatList"
"""
input BigFloatListFilter {
  containedBy: [BigFloat!]
  contains: [BigFloat!]
  eq: [BigFloat!]
  is: FilterIs
  overlaps: [BigFloat!]
}

"""An arbitrary size integer represented as a string"""
scalar BigInt

"""
Boolean expression comparing fields on type "BigInt"
"""
input BigIntFilter {
  eq: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt!]
  is: FilterIs
  lt: BigInt
  lte: BigInt
  neq: BigInt
}

"""
Boolean expression comparing fields on type "BigIntList"
"""
input BigIntListFilter {
  containedBy: [BigInt!]
  contains: [BigInt!]
  eq: [BigInt!]
  is: FilterIs
  overlaps: [BigInt!]
}

"""
Boolean expression comparing fields on type "Boolean"
"""
input BooleanFilter {
  eq: Boolean
  is: FilterIs
}

"""
Boolean expression comparing fields on type "BooleanList"
"""
input BooleanListFilter {
  containedBy: [Boolean!]
  contains: [Boolean!]
  eq: [Boolean!]
  is: FilterIs
  overlaps: [Boolean!]
}

"""
An opaque string using for tracking a position in results during pagination
"""
scalar Cursor

"""A date without time information"""
scalar Date

"""
Boolean expression comparing fields on type "Date"
"""
input DateFilter {
  eq: Date
  gt: Date
  gte: Date
  in: [Date!]
  is: FilterIs
  lt: Date
  lte: Date
  neq: Date
}

"""
Boolean expression comparing fields on type "DateList"
"""
input DateListFilter {
  containedBy: [Date!]
  contains: [Date!]
  eq: [Date!]
  is: FilterIs
  overlaps: [Date!]
}

"""A date and time"""
scalar Datetime

"""
Boolean expression comparing fields on type "Datetime"
"""
input DatetimeFilter {
  eq: Datetime
  gt: Datetime
  gte: Datetime
  in: [Datetime!]
  is: FilterIs
  lt: Datetime
  lte: Datetime
  neq: Datetime
}

"""
Boolean expression comparing fields on type "DatetimeList"
"""
input DatetimeListFilter {
  containedBy: [Datetime!]
  contains: [Datetime!]
  eq: [Datetime!]
  is: FilterIs
  overlaps: [Datetime!]
}

enum FilterIs {
  NULL
  NOT_NULL
}

"""
Boolean expression comparing fields on type "Float"
"""
input FloatFilter {
  eq: Float
  gt: Float
  gte: Float
  in: [Float!]
  is: FilterIs
  lt: Float
  lte: Float
  neq: Float
}

"""
Boolean expression comparing fields on type "FloatList"
"""
input FloatListFilter {
  containedBy: [Float!]
  contains: [Float!]
  eq: [Float!]
  is: FilterIs
  overlaps: [Float!]
}

"""
Boolean expression comparing fields on type "ID"
"""
input IDFilter {
  eq: ID
}

"""
Boolean expression comparing fields on type "Int"
"""
input IntFilter {
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  is: FilterIs
  lt: Int
  lte: Int
  neq: Int
}

"""
Boolean expression comparing fields on type "IntList"
"""
input IntListFilter {
  containedBy: [Int!]
  contains: [Int!]
  eq: [Int!]
  is: FilterIs
  overlaps: [Int!]
}

"""A Javascript Object Notation value serialized as a string"""
scalar JSON

"""The root type for creating and mutating data"""
type Mutation {
  """Deletes zero or more records from the `chat_messages` collection"""
  deleteFromchat_messagesCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: chat_messagesFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): chat_messagesDeleteResponse!

  """Deletes zero or more records from the `chat_sessions` collection"""
  deleteFromchat_sessionsCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: chat_sessionsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): chat_sessionsDeleteResponse!

  """Deletes zero or more records from the `companies` collection"""
  deleteFromcompaniesCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: companiesFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): companiesDeleteResponse!

  """Deletes zero or more records from the `users` collection"""
  deleteFromusersCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: usersFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): usersDeleteResponse!

  """Adds one or more `chat_messages` records to the collection"""
  insertIntochat_messagesCollection(objects: [chat_messagesInsertInput!]!): chat_messagesInsertResponse

  """Adds one or more `chat_sessions` records to the collection"""
  insertIntochat_sessionsCollection(objects: [chat_sessionsInsertInput!]!): chat_sessionsInsertResponse

  """Adds one or more `companies` records to the collection"""
  insertIntocompaniesCollection(objects: [companiesInsertInput!]!): companiesInsertResponse

  """Adds one or more `users` records to the collection"""
  insertIntousersCollection(objects: [usersInsertInput!]!): usersInsertResponse

  """Updates zero or more records in the `chat_messages` collection"""
  updatechat_messagesCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: chat_messagesUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: chat_messagesFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): chat_messagesUpdateResponse!

  """Updates zero or more records in the `chat_sessions` collection"""
  updatechat_sessionsCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: chat_sessionsUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: chat_sessionsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): chat_sessionsUpdateResponse!

  """Updates zero or more records in the `companies` collection"""
  updatecompaniesCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: companiesUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: companiesFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): companiesUpdateResponse!

  """Updates zero or more records in the `users` collection"""
  updateusersCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: usersUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: usersFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): usersUpdateResponse!
}

interface Node {
  """Retrieves a record by `ID`"""
  nodeId: ID!
}

"""Any type not handled by the type system"""
scalar Opaque

"""
Boolean expression comparing fields on type "Opaque"
"""
input OpaqueFilter {
  eq: Opaque
  is: FilterIs
}

"""Defines a per-field sorting order"""
enum OrderByDirection {
  """Ascending order, nulls first"""
  AscNullsFirst

  """Ascending order, nulls last"""
  AscNullsLast

  """Descending order, nulls first"""
  DescNullsFirst

  """Descending order, nulls last"""
  DescNullsLast
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

"""The root type for querying data"""
type Query {
  """A pagable collection of type `chat_messages`"""
  chat_messagesCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: chat_messagesFilter

    """Sort order to apply to the collection"""
    orderBy: [chat_messagesOrderBy!]
  ): chat_messagesConnection

  """A pagable collection of type `chat_sessions`"""
  chat_sessionsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: chat_sessionsFilter

    """Sort order to apply to the collection"""
    orderBy: [chat_sessionsOrderBy!]
  ): chat_sessionsConnection

  """A pagable collection of type `companies`"""
  companiesCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: companiesFilter

    """Sort order to apply to the collection"""
    orderBy: [companiesOrderBy!]
  ): companiesConnection

  """Retrieve a record by its `ID`"""
  node(
    """The record's `ID`"""
    nodeId: ID!
  ): Node

  """A pagable collection of type `users`"""
  usersCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: usersFilter

    """Sort order to apply to the collection"""
    orderBy: [usersOrderBy!]
  ): usersConnection
}

"""
Boolean expression comparing fields on type "String"
"""
input StringFilter {
  eq: String
  gt: String
  gte: String
  ilike: String
  in: [String!]
  iregex: String
  is: FilterIs
  like: String
  lt: String
  lte: String
  neq: String
  regex: String
  startsWith: String
}

"""
Boolean expression comparing fields on type "StringList"
"""
input StringListFilter {
  containedBy: [String!]
  contains: [String!]
  eq: [String!]
  is: FilterIs
  overlaps: [String!]
}

"""A time without date information"""
scalar Time

"""
Boolean expression comparing fields on type "Time"
"""
input TimeFilter {
  eq: Time
  gt: Time
  gte: Time
  in: [Time!]
  is: FilterIs
  lt: Time
  lte: Time
  neq: Time
}

"""
Boolean expression comparing fields on type "TimeList"
"""
input TimeListFilter {
  containedBy: [Time!]
  contains: [Time!]
  eq: [Time!]
  is: FilterIs
  overlaps: [Time!]
}

"""A universally unique identifier"""
scalar UUID

"""
Boolean expression comparing fields on type "UUID"
"""
input UUIDFilter {
  eq: UUID
  in: [UUID!]
  is: FilterIs
  neq: UUID
}

"""
Boolean expression comparing fields on type "UUIDList"
"""
input UUIDListFilter {
  containedBy: [UUID!]
  contains: [UUID!]
  eq: [UUID!]
  is: FilterIs
  overlaps: [UUID!]
}

type chat_messages implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  id: UUID!
  created_at: Datetime!
  session_id: UUID!
  message: String!
  sender_type: chat_sender_type!
  chat_sessions: chat_sessions!
}

type chat_messagesConnection {
  edges: [chat_messagesEdge!]!
  pageInfo: PageInfo!
}

type chat_messagesDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [chat_messages!]!
}

type chat_messagesEdge {
  cursor: String!
  node: chat_messages!
}

input chat_messagesFilter {
  id: UUIDFilter
  created_at: DatetimeFilter
  session_id: UUIDFilter
  message: StringFilter
  sender_type: chat_sender_typeFilter
  nodeId: IDFilter

  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [chat_messagesFilter!]

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [chat_messagesFilter!]

  """Negates a filter"""
  not: chat_messagesFilter
}

input chat_messagesInsertInput {
  id: UUID
  created_at: Datetime
  session_id: UUID
  message: String
  sender_type: chat_sender_type
}

type chat_messagesInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [chat_messages!]!
}

input chat_messagesOrderBy {
  id: OrderByDirection
  created_at: OrderByDirection
  session_id: OrderByDirection
  message: OrderByDirection
  sender_type: OrderByDirection
}

input chat_messagesUpdateInput {
  id: UUID
  created_at: Datetime
  session_id: UUID
  message: String
  sender_type: chat_sender_type
}

type chat_messagesUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [chat_messages!]!
}

enum chat_sender_type {
  user
  bot
}

"""
Boolean expression comparing fields on type "chat_sender_type"
"""
input chat_sender_typeFilter {
  eq: chat_sender_type
  in: [chat_sender_type!]
  is: FilterIs
  neq: chat_sender_type
}

type chat_sessions implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  id: UUID!
  created_at: Datetime!
  updated_at: Datetime!
  user_id: UUID!
  bearing_data: JSON
  users: users
  chat_messagesCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: chat_messagesFilter

    """Sort order to apply to the collection"""
    orderBy: [chat_messagesOrderBy!]
  ): chat_messagesConnection
}

type chat_sessionsConnection {
  edges: [chat_sessionsEdge!]!
  pageInfo: PageInfo!
}

type chat_sessionsDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [chat_sessions!]!
}

type chat_sessionsEdge {
  cursor: String!
  node: chat_sessions!
}

input chat_sessionsFilter {
  id: UUIDFilter
  created_at: DatetimeFilter
  updated_at: DatetimeFilter
  user_id: UUIDFilter
  nodeId: IDFilter

  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [chat_sessionsFilter!]

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [chat_sessionsFilter!]

  """Negates a filter"""
  not: chat_sessionsFilter
}

input chat_sessionsInsertInput {
  id: UUID
  created_at: Datetime
  updated_at: Datetime
  user_id: UUID
  bearing_data: JSON
}

type chat_sessionsInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [chat_sessions!]!
}

input chat_sessionsOrderBy {
  id: OrderByDirection
  created_at: OrderByDirection
  updated_at: OrderByDirection
  user_id: OrderByDirection
}

input chat_sessionsUpdateInput {
  id: UUID
  created_at: Datetime
  updated_at: Datetime
  user_id: UUID
  bearing_data: JSON
}

type chat_sessionsUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [chat_sessions!]!
}

type companies implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  id: UUID!
  created_at: Datetime!
  email: String!
  name: String!
  phone: String
  address: String
}

type companiesConnection {
  edges: [companiesEdge!]!
  pageInfo: PageInfo!
}

type companiesDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [companies!]!
}

type companiesEdge {
  cursor: String!
  node: companies!
}

input companiesFilter {
  id: UUIDFilter
  created_at: DatetimeFilter
  email: StringFilter
  name: StringFilter
  phone: StringFilter
  address: StringFilter
  nodeId: IDFilter

  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [companiesFilter!]

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [companiesFilter!]

  """Negates a filter"""
  not: companiesFilter
}

input companiesInsertInput {
  id: UUID
  created_at: Datetime
  email: String
  name: String
  phone: String
  address: String
}

type companiesInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [companies!]!
}

input companiesOrderBy {
  id: OrderByDirection
  created_at: OrderByDirection
  email: OrderByDirection
  name: OrderByDirection
  phone: OrderByDirection
  address: OrderByDirection
}

input companiesUpdateInput {
  id: UUID
  created_at: Datetime
  email: String
  name: String
  phone: String
  address: String
}

type companiesUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [companies!]!
}

type users implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  id: UUID!
  created_at: Datetime!
  email: String!
  phone: String
  auth_uid: UUID!
  chat_sessionsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """
    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.
    """
    offset: Int

    """Filters to apply to the results set when querying from the collection"""
    filter: chat_sessionsFilter

    """Sort order to apply to the collection"""
    orderBy: [chat_sessionsOrderBy!]
  ): chat_sessionsConnection
}

type usersConnection {
  edges: [usersEdge!]!
  pageInfo: PageInfo!
}

type usersDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [users!]!
}

type usersEdge {
  cursor: String!
  node: users!
}

input usersFilter {
  id: UUIDFilter
  created_at: DatetimeFilter
  email: StringFilter
  phone: StringFilter
  auth_uid: UUIDFilter
  nodeId: IDFilter

  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [usersFilter!]

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [usersFilter!]

  """Negates a filter"""
  not: usersFilter
}

input usersInsertInput {
  id: UUID
  created_at: Datetime
  email: String
  phone: String
  auth_uid: UUID
}

type usersInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [users!]!
}

input usersOrderBy {
  id: OrderByDirection
  created_at: OrderByDirection
  email: OrderByDirection
  phone: OrderByDirection
  auth_uid: OrderByDirection
}

input usersUpdateInput {
  id: UUID
  created_at: Datetime
  email: String
  phone: String
  auth_uid: UUID
}

type usersUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [users!]!
}

